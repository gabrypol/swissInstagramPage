{"version":3,"sources":["Posts/index.js","Modal/PostGrid.js","Profile/ProfileImage.js","Profile/UserGrid.js","Modal/Modal.js","Gallery/Gallery.js","App.js","serviceWorker.js","index.js"],"names":["Posts","id","title","PostGrid","styled","div","_templateObject","InfoGrid","_templateObject2","ProfileImage","ProfileImage_templateObject","_ref","mini","css","ProfileImage_templateObject2","UserGridStyled","UserGrid_templateObject","MiniUserGrid","UserGrid_templateObject2","Photo","_templateObject3","Name","_templateObject4","Label","_templateObject5","Description","_templateObject6","UserGrid","react_default","a","createElement","OverFlowHidden","createGlobalStyle","Modal_templateObject","ModalStyled","Modal_templateObject2","top","Modal","_ref2","match","history","image","parseInt","params","onClick","e","stopPropagation","goBack","style","position","left","bottom","right","height","background","window","scrollY","innerHeight","Image","index","PhotoGrid","Gallery_templateObject","cascade","Gallery_templateObject2","LinkGrid","Gallery_templateObject3","TabLink","Link","Gallery_templateObject4","selected","ImageLink","Gallery_templateObject5","_ref3","_ref4","Gallery_templateObject6","Gallery","_ref5","location","search","to","concat","url","pathname","map","i","key","state","modal","ModalSwitch","previousLocation","_this","props","nextProps","this","action","isModal","react_router","exact","path","component","Component","App_templateObject","ModalGallery","react_router_dom","Boolean","hostname","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.02cd6fdb.chunk.js","sourcesContent":["export default [\n    { id: 1, title: \"Bern\" },\n    { id: 2, title: \"CityLake\" },\n    { id: 3, title: \"Mountain\" },\n    { id: 4, title: \"Mountain\" },\n    { id: 5, title: \"Zurich\" },\n    { id: 6, title: \"Cow\" },\n    { id: 7, title: \"Luzern\" },\n    { id: 8, title: \"Mountain\" },\n    { id: 9, title: \"Train\" },\n    { id: 10, title: \"Mountain\" },\n    { id: 11, title: \"Zurich\" },\n    { id: 12, title: \"Mountain\" },\n    { id: 13, title: \"Luzern\" },\n    { id: 14, title: \"Zurich\" },\n    { id: 15, title: \"Vespa\" },\n    { id: 16, title: \"Road\" },\n    { id: 17, title: \"Lake\" },\n    { id: 18, title: \"Village\" },\n    { id: 19, title: \"Mountain\" },\n    { id: 20, title: \"Mountain\" },\n    { id: 21, title: \"Mountain\" },\n  ];","import styled from \"styled-components\";\n\nexport const PostGrid = styled.div`\n    display: grid;\n    grid-template-columns: 2fr 1fr;\n    @media (max-width: 1000px) {\n        grid-template-columns: 1fr;\n    }\n`\n\nexport const InfoGrid = styled.div`\n    padding: 20px;\n    display: grid;\n    grid-template-rows: 60px auto 30px;\n    grid-gap: 10px;\n`","import styled, {css} from 'styled-components'\n\nexport const ProfileImage = styled.div`\n    width: 160px;\n    height: 160px;\n    background: no-repeat center/100% url(/img/swissFlag.jpeg);\n    border-radius: 50%;\n    margin-right: 40px;\n    align-self: center;\n    @media (max-width: 1000px) {\n        width: 100px;\n        height: 100px;\n        margin: 0px;\n    }\n    ${({mini}) => mini && css`\n        width: 40px;\n        height: 40px;\n        margin: 5px;\n        @media (max-width: 1000px) {\n            width: 40px;\n            height: 40px;\n            margin: 0px;\n        }\n    `}\n`","import React from \"react\";\nimport styled from \"styled-components\";\nimport {ProfileImage} from \"./ProfileImage\";\n\nconst UserGridStyled = styled.div`\n    display: grid;\n    justify-content: center;\n    margin-top: 30px;\n    margin-bottom: 30px;\n    grid-template-areas: \"photo name\"\n                         \"photo label\"\n                         \"photo description\";\n    @media (max-width: 1000px) {\n        grid-template-areas: \"photo name\"\n                             \"label label\"\n                             \"description description\";\n        grid-template-columns: auto auto;\n        grid-gap: 15px;\n    }\n`\n\nexport const MiniUserGrid = styled.div`\n    display: grid;\n    justify-content: left;\n    grid-template-columns: auto auto;\n    gap: 10px;\n`\n\nconst Photo = styled.div`\n    grid-area: photo;\n    justify-self: center;\n`\n\nconst Name = styled.div`\n    grid-area: name;\n    font-size: 35px;\n    align-self: center;\n`\n\nconst Label = styled.div`\n    grid-area: label;\n    @media (max-width: 1000px) {\n        padding-left: 30px;\n        padding-right: 30px;\n    }\n`\n\nconst Description = styled.div`\n    grid-area: description;\n    max-width: 400px;\n    @media (max-width: 1000px) {\n        padding-left: 30px;\n        padding-right: 30px;\n    }\n   \n`\n\nexport default function() {\n    return <UserGridStyled> \n        <Photo><ProfileImage /></Photo>\n        <Name>switzerland</Name>\n            <Label>\n                <strong>21</strong> posts<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>\n                <strong>5.7m</strong> followers<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>\n                <strong>0</strong> following\n            </Label>\n        <Description>Switzerland is a small country, located in the very heart of Europe, and it is a vibrant destination made of stunning cities and landscapes.</Description>\n    </UserGridStyled>\n}","import React from \"react\";\nimport Posts from \"../Posts\";\nimport {Image} from \"../App\"\nimport styled, {createGlobalStyle} from \"styled-components\";\nimport {PostGrid, InfoGrid} from \"./PostGrid\";\nimport {MiniUserGrid} from \"../Profile/UserGrid\";\nimport {ProfileImage} from \"../Profile/ProfileImage\";\n\nconst OverFlowHidden = createGlobalStyle`\n    body {\n        overflow: hidden;\n        @media (max-width: 1000px) {\n          overflow: scroll;\n        }\n    }\n`\n\nconst ModalStyled = styled.div`\n    position: absolute;\n    background: #fff;\n    top: ${({top}) => top}px;\n    left: 10%;\n    right: 10%;\n    @media (max-width: 1000px) {\n      left: 0;\n      right: 0;\n      bottom: 10%;\n    }\n`\n\nexport function Modal({ match, history }) {\n    let image = Posts[parseInt(match.params.id, 10) - 1];\n  \n    if (!image) return null;\n  \n    let back = e => {\n      e.stopPropagation();\n      history.goBack();\n    };\n  \n    return (\n      <div\n        onClick={back}\n        style={{\n          position: \"absolute\",\n          top: 0,\n          left: 0,\n          bottom: 0,\n          right: 0,\n          height: '5000px',\n          background: \"rgba(0, 0, 0, 0.8)\"\n        }}\n      >\n        <ModalStyled\n            top={window.scrollY + (window.innerHeight * 0.05) }\n        >\n            <OverFlowHidden />\n            <PostGrid>\n                <Image index={image.id} />\n                <InfoGrid>\n                    <MiniUserGrid>\n                        <ProfileImage mini />\n                        <h3> switzerland </h3>\n                    </MiniUserGrid>\n                    <div> Comments </div>\n                    <div><strong>589,453 likes</strong></div>\n                </InfoGrid>\n            </PostGrid>\n        </ModalStyled>\n      </div>\n    );\n}","import React from \"react\";\nimport styled, {\n  css\n} from \"styled-components\";\nimport UserGrid from \"../Profile/UserGrid\";\nimport {\n  Link\n} from \"react-router-dom\";\nimport Posts from \"../Posts\";\n\nconst PhotoGrid = styled.div `\n  display: grid;\n  grid-template-columns: repeat(3, 305px);\n  justify-content: center;\n  grid-gap: 20px;\n  grid-auto-rows: 305px;\n  margin-top: 20px;\n  padding-bottom: 30px;\n  ${({ cascade }) =>\n    cascade &&\n    css`\ngrid - auto - rows: 200 px;\ngrid - gap: 5 px;\n`}\n  @media (max-width: 1000px) {\n    grid-template-columns: repeat(3, 1fr);\n    grid-gap: 5px;\n    padding-left: 30px;\n    padding-right: 30px;\n  }\n`;\n\nconst LinkGrid = styled.div `\n  display: grid;\n  grid-template-columns: auto auto;\n  justify-content: center;\n  grid-gap: 20px;\n`;\n\nconst TabLink = styled(Link)\n`\n  text-decoration: none;\n  color: #ccc;\n  text-transform: uppercase;\n  letter-spacing: 3px;\n  ${({ selected }) => selected && `\ncolor: black;\n`}\n`;\n\nconst ImageLink = styled(Link)\n`\n  background: no-repeat center url(img/${({ index }) => index}.jpeg);\n  background-size: cover;\n  :hover {\n    opacity: 0.7;\n  }\n  ${({ cascade }) =>\n    cascade &&\n    css` &\n: nth - of -type(2n + 1) {\n  grid - row - start: span 2;\n}\n`}\n`;\n\nexport function Gallery({\n  match,\n  location\n}) {\n  const cascade = location.search === \"?type=cascade\";\n  return ( <\n    div >\n    <\n    UserGrid / >\n    <\n    LinkGrid >\n    <\n    TabLink selected = {\n      !cascade\n    }\n    to = {\n      `${match.url}`\n    } >\n    square <\n    /TabLink> <\n    TabLink selected = {\n      cascade\n    }\n    to = {\n      {\n        pathname: `${match.url}`,\n        search: \"?type=cascade\"\n      }\n    } >\n    cascade <\n    /TabLink> < /\n    LinkGrid > <\n    PhotoGrid cascade = {\n      cascade\n    } > {\n      Posts.map(i => ( <\n        ImageLink cascade = {\n          cascade\n        }\n        key = {\n          i.id\n        }\n        index = {\n          i.id\n        }\n        to = {\n          {\n            pathname: `/img/${i.id}`,\n            // this is the trick!\n            state: {\n              modal: true\n            }\n          }\n        }\n        />\n      ))\n    } <\n    /PhotoGrid> < /\n    div >\n  );\n}","import React, {\n  Component\n} from \"react\";\nimport {\n  HashRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport {\n  Modal\n} from './Modal/Modal';\nimport {\n  Gallery\n} from \"./Gallery/Gallery\";\n\n// This example shows how to render two different screens\n// (or the same screen in a different context) at the same url,\n// depending on how you got there.\n//\n// Click the colors and see them full screen, then \"visit the\n// gallery\" and click on the colors. Note the URL and the component\n// are the same as before but now we see them inside a modal\n// on top of the old screen.\n\nclass ModalSwitch extends Component {\n  // We can pass a location to <Switch/> that will tell it to\n  // ignore the router's current location and use the location\n  // prop instead.\n  //\n  // We can also use \"location state\" to tell the app the user\n  // wants to go to `/img/2` in a modal, rather than as the\n  // main page, keeping the gallery visible behind it.\n  //\n  // Normally, `/img/2` wouldn't match the gallery at `/`.\n  // So, to get both screens to render, we can save the old\n  // location and pass it to Switch, so it will think the location\n  // is still `/` even though its `/img/2`.\n  previousLocation = this.props.location;\n\n  componentWillUpdate(nextProps) {\n    let {\n      location\n    } = this.props;\n\n    // set previousLocation if props.location is not modal\n    if (\n      nextProps.history.action !== \"POP\" &&\n      (!location.state || !location.state.modal)\n    ) {\n      this.previousLocation = this.props.location;\n    }\n  }\n\n  render() {\n    let {\n      location\n    } = this.props;\n\n    let isModal = !!(\n      location.state &&\n      location.state.modal &&\n      this.previousLocation !== location\n    ); // not initial render\n\n    return ( <\n      div >\n      <\n      Switch location = {\n        isModal ? this.previousLocation : location\n      } >\n      <\n      Route exact path = \"/\"\n      component = {\n        Gallery\n      }\n      /> <\n      Route path = \"/gallery\"\n      component = {\n        Gallery\n      }\n      /> <\n      Route path = \"/img/:id\"\n      component = {\n        Modal\n      }\n      /> <\n      /Switch> {\n        isModal ? < Route path = \"/img/:id\"\n        component = {\n          Modal\n        }\n        /> : null} <\n        /div>\n      );\n    }\n  }\n\n  export const Image = styled.div `\n  background: no-repeat center url(img/${({index}) => index}.jpeg);\n  background-size: cover;\n  height: ${(window.innerHeight * 0.9)}px;\n`\n\n  function ModalGallery() {\n    return ( <\n      Router >\n      <\n      Route component = {\n        ModalSwitch\n      }\n      /> <\n      /Router>\n    );\n  }\n\n  export default ModalGallery;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}